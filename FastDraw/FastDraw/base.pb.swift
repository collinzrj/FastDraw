// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: base.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Point {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var force: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Stroke {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID of the stroke. Use a random generator to maintain uniqueness.
  public var id: Int64 = 0

  /// Stroke width.
  public var width: Float = 0

  /// Type of the stroke.
  public var type: Stroke.TypeEnum = .unknown

  /// Format: |R|G|B|A|, each uint8. Assume little-endian here as this is
  /// not expected to run on big-endian systems like PowerPC.
  public var color: UInt32 = 0

  /// Exact location for the first point.
  public var basePoint: Point {
    get {return _basePoint ?? Point()}
    set {_basePoint = newValue}
  }
  /// Returns true if `basePoint` has been explicitly set.
  public var hasBasePoint: Bool {return self._basePoint != nil}
  /// Clears the value of `basePoint`. Subsequent reads from it will return its default value.
  public mutating func clearBasePoint() {self._basePoint = nil}

  /// Erased points.
  public var erasedOffsets: [UInt64] = []

  /// Offset points from the first point.
  public var offsetPoints: [Point] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case pen // = 1
    case highlighter // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .pen
      case 2: self = .highlighter
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .pen: return 1
      case .highlighter: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _basePoint: Point? = nil
}

#if swift(>=4.2)

extension Stroke.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Stroke.TypeEnum] = [
    .unknown,
    .pen,
    .highlighter,
  ]
}

#endif  // swift(>=4.2)

public struct Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID of the page.
  public var id: Int64 = 0

  public var style: UInt32 = 0

  /// Stored in OSS. PDF Format.
  public var background: String = String()

  /// Page in the PDF.
  public var backgroundPage: UInt32 = 0

  /// Stroke list.
  public var strokes: [Stroke] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Notebook {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pages: [Page] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Point"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "force"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.force)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.force != 0 {
      try visitor.visitSingularFloatField(value: self.force, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Point, rhs: Point) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.force != rhs.force {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stroke: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Stroke"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "width"),
    3: .same(proto: "type"),
    4: .same(proto: "color"),
    5: .standard(proto: "base_point"),
    14: .standard(proto: "erased_offsets"),
    15: .standard(proto: "offset_points"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularFloatField(value: &self.width)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.color)
      case 5: try decoder.decodeSingularMessageField(value: &self._basePoint)
      case 14: try decoder.decodeRepeatedUInt64Field(value: &self.erasedOffsets)
      case 15: try decoder.decodeRepeatedMessageField(value: &self.offsetPoints)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularFloatField(value: self.width, fieldNumber: 2)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.color != 0 {
      try visitor.visitSingularUInt32Field(value: self.color, fieldNumber: 4)
    }
    if let v = self._basePoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.erasedOffsets.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.erasedOffsets, fieldNumber: 14)
    }
    if !self.offsetPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.offsetPoints, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stroke, rhs: Stroke) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.width != rhs.width {return false}
    if lhs.type != rhs.type {return false}
    if lhs.color != rhs.color {return false}
    if lhs._basePoint != rhs._basePoint {return false}
    if lhs.erasedOffsets != rhs.erasedOffsets {return false}
    if lhs.offsetPoints != rhs.offsetPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stroke.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "PEN"),
    2: .same(proto: "HIGHLIGHTER"),
  ]
}

extension Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "style"),
    3: .same(proto: "background"),
    4: .same(proto: "backgroundPage"),
    15: .same(proto: "strokes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.style)
      case 3: try decoder.decodeSingularStringField(value: &self.background)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.backgroundPage)
      case 15: try decoder.decodeRepeatedMessageField(value: &self.strokes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.style != 0 {
      try visitor.visitSingularUInt32Field(value: self.style, fieldNumber: 2)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 3)
    }
    if self.backgroundPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.backgroundPage, fieldNumber: 4)
    }
    if !self.strokes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.strokes, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Page, rhs: Page) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.style != rhs.style {return false}
    if lhs.background != rhs.background {return false}
    if lhs.backgroundPage != rhs.backgroundPage {return false}
    if lhs.strokes != rhs.strokes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Notebook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Notebook"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    15: .same(proto: "pages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 15: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notebook, rhs: Notebook) -> Bool {
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
